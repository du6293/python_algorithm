from collections import deque

n ,m, v= map(int,input().split())  # 정점 갯수, 간선 갯수, 시작 정점 번호


graph = [[] for _ in range(n+1)]
for _ in range(m):  # 간선이 연결하는 두 정점의 번호
    a,b = list(map(int,input().split()))
    graph[a].append(b)
    graph[b].append(a)

for i in range(len(graph)):
    graph[i].sort()
d_visited = [False] * (n+1)
b_visited = [False] * (n+1)
dfs_answer =[v]
bfs_answer = [v]
# dfs
def dfs(v):
    d_visited[v] = True
    for i in graph[v]:
        if d_visited[i] == False:
            dfs_answer.append(i)
            dfs(i)
            d_visited[i]=True

    return dfs_answer



# bfs    
def bfs(v):
    queue = deque()
    queue.append(v)
    b_visited[v] = True
    while queue:
        x = queue.popleft()
        for next in graph[x]:
            if b_visited[next] == False:
                b_visited[next] = b_visited[x] + 1
                queue.append(next)
                bfs_answer.append(next)
    return bfs_answer

d = dfs(v)
b = bfs(v)
print(*d)
print(*b)
