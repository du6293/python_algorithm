import math
# 시간 계산 a: 출발, b:도착, a,b는 리스트
def check(a,b):
    time = 0
    if b[1] >= a[1]:
        time = (b[0] - a[0]) * 60 + (b[1] - a[1])
    else:
        time = (b[0] - 1 - a[0]) * 60 + (60 + b[1] - a[1])
    return time


def solution(fees, records):  # fees[0] 기본 분, fees[1] 기본요금 , fees[2] 기본단위, fees[3] 추가요금 
    answer = []
    for i in range(len(records)):
        records[i] = records[i].split(' ')
    records.sort(key = lambda x: x[1])
    
    for i in range(len(records)):
        records[i][0] = (int(records[i][0][:2]), int(records[i][0][3:]))
        
        
    res = []
    if len(records) == 1 and records[0][2] == 'IN':
        res.append([ check(records[0][0],[23,59]) , int(records[0][1]) ])
    elif len(records) > 1:
        for i in range(len(records)-1):

            if records[i][2] == "IN" and records[i+1][2] == "IN":  # IN이 연속
                res.append([ check(records[i][0],[23,59]) , int(records[i][1]) ])
            elif records[i][2] == "IN" and records[i+1][2] == "OUT":
                res.append([ check(records[i][0],records[i+1][0]) , int(records[i][1]) ])
        for i in range(len(records)-1,len(records)):
            if records[i][2]=='IN':
                res.append([ check(records[i][0],[23,59]) , int(records[i][1]) ])
            

    ticket = dict()
    for i in range(len(res)):
        key = res[i][1]
        value = res[i][0]
        if key in ticket:
            ticket[key]+=[value]
        else:
            ticket[key] = [value]
    for key,value in ticket.items():
        ticket[key] = sum(value)
    tic = sorted(ticket.items())
        
    for i in range(len(tic)):
        answer.append(fee(tic[i][1],fees))

    return answer

# fees[0] 기본 분, fees[1] 기본요금 , fees[2] 기본단위, fees[3] 추가요금 

def fee(s,fees):  # s: 총 시간
    money = 0
    if s <=fees[0]:
        money = fees[1]
    else:
        money  = fees[1] + math.ceil((s-fees[0])/fees[2]) * fees[3]
    return money
